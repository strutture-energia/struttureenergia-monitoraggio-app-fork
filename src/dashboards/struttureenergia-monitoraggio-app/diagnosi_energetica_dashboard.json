{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "grafana",
          "uid": "-- Grafana --"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "id": 53,
  "links": [],
  "liveNow": false,
  "panels": [
    {
      "collapsed": false,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 0
      },
      "id": 5,
      "panels": [],
      "title": "Tempo Reale",
      "type": "row"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "c8d51185-be18-4b9b-8da3-4947b99369ea"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "max": 900,
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              }
            ]
          },
          "unit": "watt"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 10,
        "w": 6,
        "x": 0,
        "y": 1
      },
      "id": 2,
      "options": {
        "minVizHeight": 75,
        "minVizWidth": 75,
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "showThresholdLabels": false,
        "showThresholdMarkers": true,
        "sizing": "auto",
        "text": {
          "titleSize": 15
        }
      },
      "pluginVersion": "10.1.5",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "e828abd2-fb14-44af-bf94-9dacac649c95"
          },
          "query": "from(bucket: \"homeassistant\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"device_class\"] == \"power\")\n  |> filter(fn: (r) => r[\"device_id\"] == ${deviceId})\n  |> group(columns: [\"device_id\"]) \n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> yield(name: \"mean\")",
          "refId": "A"
        }
      ],
      "title": "Potenza",
      "type": "gauge"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "c8d51185-be18-4b9b-8da3-4947b99369ea"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "max": 5,
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              }
            ]
          },
          "unit": "amp"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 10,
        "w": 6,
        "x": 6,
        "y": 1
      },
      "id": 3,
      "options": {
        "minVizHeight": 75,
        "minVizWidth": 75,
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "showThresholdLabels": false,
        "showThresholdMarkers": true,
        "sizing": "auto",
        "text": {
          "titleSize": 15
        }
      },
      "pluginVersion": "10.1.5",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "e828abd2-fb14-44af-bf94-9dacac649c95"
          },
          "query": "from(bucket: \"homeassistant\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"device_class\"] == \"current\")\n  |> filter(fn: (r) => r[\"device_id\"] == ${deviceId})\n  |> group(columns: [\"device_id\"]) \n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> yield(name: \"mean\")",
          "refId": "A"
        }
      ],
      "title": "Corrente",
      "type": "gauge"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "c8d51185-be18-4b9b-8da3-4947b99369ea"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "max": 240,
          "min": 0,
          "thresholds": {
            "mode": "percentage",
            "steps": [
              {
                "color": "green",
                "value": null
              }
            ]
          },
          "unit": "volt"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 10,
        "w": 6,
        "x": 12,
        "y": 1
      },
      "id": 21,
      "options": {
        "minVizHeight": 75,
        "minVizWidth": 75,
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "showThresholdLabels": false,
        "showThresholdMarkers": true,
        "sizing": "auto",
        "text": {
          "titleSize": 15
        }
      },
      "pluginVersion": "10.1.5",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "e828abd2-fb14-44af-bf94-9dacac649c95"
          },
          "query": "from(bucket: \"homeassistant\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"device_class\"] == \"voltage\")\n  |> filter(fn: (r) => r[\"device_id\"] == ${deviceId})\n  |> group(columns: [\"device_id\"]) \n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> yield(name: \"mean\")",
          "refId": "A"
        }
      ],
      "title": "Tensione",
      "type": "gauge"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "c8d51185-be18-4b9b-8da3-4947b99369ea"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "max": 240,
          "min": 0,
          "thresholds": {
            "mode": "percentage",
            "steps": [
              {
                "color": "green",
                "value": null
              }
            ]
          },
          "unit": "volt"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 10,
        "w": 6,
        "x": 18,
        "y": 1
      },
      "id": 7,
      "options": {
        "minVizHeight": 75,
        "minVizWidth": 75,
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "showThresholdLabels": false,
        "showThresholdMarkers": true,
        "sizing": "auto",
        "text": {
          "titleSize": 15
        }
      },
      "pluginVersion": "10.1.5",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "e828abd2-fb14-44af-bf94-9dacac649c95"
          },
          "query": "from(bucket: \"homeassistant\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"device_class\"] == \"power_factor\")\n  |> filter(fn: (r) => r[\"device_id\"] == ${deviceId})\n  |> group(columns: [\"device_id\"]) \n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> yield(name: \"mean\")",
          "refId": "A"
        }
      ],
      "title": "Fattore di potenza",
      "type": "gauge"
    },
    {
      "collapsed": false,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 11
      },
      "id": 6,
      "panels": [],
      "title": "Storico",
      "type": "row"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "c8d51185-be18-4b9b-8da3-4947b99369ea"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "KW",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 9,
        "w": 24,
        "x": 0,
        "y": 12
      },
      "id": 1,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "e828abd2-fb14-44af-bf94-9dacac649c95"
          },
          "query": "from(bucket: \"homeassistant\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"device_class\"] == \"power\")\n  |> filter(fn: (r) => r[\"device_id\"] == ${deviceId})\n  |> group(columns: [\"device_id\"]) \n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> yield(name: \"mean\")",
          "refId": "A"
        }
      ],
      "title": "Potenza",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "c8d51185-be18-4b9b-8da3-4947b99369ea"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "A",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "amp"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 9,
        "w": 24,
        "x": 0,
        "y": 21
      },
      "id": 8,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "e828abd2-fb14-44af-bf94-9dacac649c95"
          },
          "query": "from(bucket: \"homeassistant\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"device_class\"] == \"current\")\n  |> filter(fn: (r) => r[\"device_id\"] == ${deviceId})\n  |> group(columns: [\"device_id\"]) \n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> yield(name: \"mean\")",
          "refId": "A"
        }
      ],
      "title": "Corrente",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "c8d51185-be18-4b9b-8da3-4947b99369ea"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "V",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "volt"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 9,
        "w": 24,
        "x": 0,
        "y": 30
      },
      "id": 4,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "e828abd2-fb14-44af-bf94-9dacac649c95"
          },
          "query": "from(bucket: \"homeassistant\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"device_class\"] == \"voltage\")\n  |> filter(fn: (r) => r[\"device_id\"] == ${deviceId})\n  |> group(columns: [\"device_id\"]) \n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> yield(name: \"mean\")",
          "refId": "A"
        }
      ],
      "title": "Tensione",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "c8d51185-be18-4b9b-8da3-4947b99369ea"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "V",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "volt"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 9,
        "w": 24,
        "x": 0,
        "y": 39
      },
      "id": 22,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "e828abd2-fb14-44af-bf94-9dacac649c95"
          },
          "query": "from(bucket: \"homeassistant\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"device_class\"] == \"power_factor\")\n  |> filter(fn: (r) => r[\"device_id\"] == ${deviceId})\n  |> group(columns: [\"device_id\"]) \n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> yield(name: \"mean\")",
          "refId": "A"
        }
      ],
      "title": "Fattore di potenza",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "c8d51185-be18-4b9b-8da3-4947b99369ea"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "kWh",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "kwatth"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 9,
        "w": 24,
        "x": 0,
        "y": 48
      },
      "id": 9,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "e828abd2-fb14-44af-bf94-9dacac649c95"
          },
          "query": "from(bucket: \"homeassistant\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"device_class\"] == \"energy\" and r[\"type_measure\"] == \"energia\")\n  |> filter(fn: (r) => r[\"device_id\"] == ${deviceId})\n  |> group(columns: [\"device_id\"])\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> yield(name: \"mean\")",
          "refId": "A"
        }
      ],
      "title": "Energia",
      "type": "timeseries"
    },
    {
      "collapsed": false,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 57
      },
      "id": 10,
      "panels": [],
      "title": "Profili Giornalieri",
      "type": "row"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "c8d51185-be18-4b9b-8da3-4947b99369ea"
      },
      "gridPos": {
        "h": 11,
        "w": 12,
        "x": 0,
        "y": 58
      },
      "id": 12,
      "options": {
        "config": {
          "displayModeBar": true,
          "displaylogo": false,
          "modeBarButtonsToRemove": [
            "toggleSpikelines",
            "hoverClosestCartesian",
            "hoverCompareCartesian"
          ]
        },
        "data": [
          {
            "mode": "lines",
            "type": "scatter"
          }
        ],
        "layout": {
          "font": {
            "color": "#c7d0d9",
            "family": "Roboto",
            "size": 12
          },
          "margin": {
            "b": 40,
            "t": 30
          },
          "paper_bgcolor": "rgba(24,27,31,0)",
          "plot_bgcolor": "rgba(24,27,31,0)",
          "xaxis": {
            "autorange": true,
            "gridcolor": "#3d4146",
            "range": [
              22,
              23
            ],
            "tickmode": "auto",
            "title": {
              "text": "Indice Orario"
            },
            "type": "linear"
          },
          "yaxis": {
            "autorange": true,
            "gridcolor": "#3d4146",
            "range": [
              0.5339420353819558,
              0.5720824598183086
            ],
            "tickmode": "auto",
            "ticks": "outside",
            "title": {
              "text": "Kw/h"
            },
            "type": "linear"
          }
        },
        "onclick": "console.log(data)\nwindow.updateVariables({query:{'var-project':'test'}, partial: true})",
        "script": "\nlet WEEK = [\"Lun\", \"Mar\", \"Mer\", \"Gio\", \"Ven\", \"Sab\", \"Dom\"]\n\n\nlet seriess = data?.series?.map((s, idx) => {\n  const numWeek = +s.fields[4]?.labels?.dayOfWeek;\n  return {\n    x: s?.fields[3]?.values || [],\n    y: s?.fields[4]?.values || [],\n    name: numWeek ? WEEK[numWeek - 1] : \"\"\n  }\n})\n\n\nconsole.log(\"series\", seriess)\nreturn {\n  data: seriess,\n  config: {\n    displayModeBar: false,\n  },\n};"
      },
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "e828abd2-fb14-44af-bf94-9dacac649c95"
          },
          "query": "import \"date\"\nimport \"timezone\"\n\n\ncalcStagione = (mese) => {\n    return if mese >= 3 and mese <= 5 then \"Primavera\"\n    else if mese >= 6 and mese <= 8 then \"Estate\"\n    else if mese >= 9 and mese <= 11 then \"Autunno\"\n    else \"Inverno\"\n}\n\nfrom(bucket: \"homeassistant\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == \"kWh\" and r._field == \"value\" and  r[\"type_measure\"] == \"energia\" and r.device_id == ${deviceId})\n  |> map(fn: (r) => ({\n      _time: r._time,\n      _value: r._value,\n      dayOfWeek: date.weekDay(t: r._time),\n      ora: date.hour(t: r._time),\n      stagione: calcStagione(mese: date.month(t: r._time))\n  }))\n\n  |> filter(fn: (r) => r.stagione == \"Primavera\")\n  |> map(fn: (r) => ({ r with dayOfWeek: if r.dayOfWeek == 0 then 7 else r.dayOfWeek }))\n  |> group(columns: [\"dayOfWeek\", \"ora\"]) \n  |> aggregateWindow(every: 1y, fn: mean, createEmpty: false)\n  |> sort(columns: [\"ora\"])\n  |> group(columns: [\"dayOfWeek\"]) ",
          "refId": "A"
        }
      ],
      "title": "Profilo giorno medio: PRIMAVERA",
      "type": "ae3e-plotly-panel"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "c8d51185-be18-4b9b-8da3-4947b99369ea"
      },
      "gridPos": {
        "h": 11,
        "w": 12,
        "x": 12,
        "y": 58
      },
      "id": 14,
      "options": {
        "config": {
          "displayModeBar": true,
          "displaylogo": false,
          "modeBarButtonsToRemove": [
            "toggleSpikelines",
            "hoverClosestCartesian",
            "hoverCompareCartesian"
          ]
        },
        "data": [
          {
            "mode": "lines",
            "type": "scatter"
          }
        ],
        "layout": {
          "font": {
            "color": "#c7d0d9",
            "family": "Roboto",
            "size": 12
          },
          "margin": {
            "b": 40,
            "t": 30
          },
          "paper_bgcolor": "rgba(24,27,31,0)",
          "plot_bgcolor": "rgba(24,27,31,0)",
          "xaxis": {
            "autorange": true,
            "gridcolor": "#3d4146",
            "range": [
              0,
              23
            ],
            "tickmode": "auto",
            "title": {
              "text": "Indice Orario"
            },
            "type": "linear"
          },
          "yaxis": {
            "autorange": true,
            "gridcolor": "#3d4146",
            "range": [
              1609.190106481481,
              1609.8180119395715
            ],
            "tickmode": "auto",
            "ticks": "outside",
            "title": {
              "text": "Kw/h"
            },
            "type": "linear"
          }
        },
        "onclick": "console.log(data)\nwindow.updateVariables({query:{'var-project':'test'}, partial: true})",
        "script": "\nlet WEEK = [\"Lun\", \"Mar\", \"Mer\", \"Gio\", \"Ven\", \"Sab\", \"Dom\"]\n\n\nlet seriess = data?.series?.map((s, idx) => {\n  const numWeek = +s.fields[4]?.labels?.dayOfWeek;\n  return {\n    x: s?.fields[3]?.values || [],\n    y: s?.fields[4]?.values || [],\n    name: numWeek ? WEEK[numWeek - 1] : \"\"\n  }\n})\n\n\nconsole.log(\"series\", seriess)\nreturn {\n  data: seriess,\n  config: {\n    displayModeBar: false,\n  },\n};"
      },
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "e828abd2-fb14-44af-bf94-9dacac649c95"
          },
          "query": "import \"date\"\nimport \"timezone\"\n\n\ncalcStagione = (mese) => {\n    return if mese >= 3 and mese <= 5 then \"Primavera\"\n    else if mese >= 6 and mese <= 8 then \"Estate\"\n    else if mese >= 9 and mese <= 11 then \"Autunno\"\n    else \"Inverno\"\n}\n\nfrom(bucket: \"homeassistant\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == \"kWh\" and r._field == \"value\" and  r[\"type_measure\"] == \"energia\" and r.device_id == ${deviceId})\n  |> map(fn: (r) => ({\n      _time: r._time,\n      _value: r._value,\n      dayOfWeek: date.weekDay(t: r._time),\n      ora: date.hour(t: r._time),\n      stagione: calcStagione(mese: date.month(t: r._time))\n  }))\n\n  |> filter(fn: (r) => r.stagione == \"Estate\")\n  |> map(fn: (r) => ({ r with dayOfWeek: if r.dayOfWeek == 0 then 7 else r.dayOfWeek }))\n  |> group(columns: [\"dayOfWeek\", \"ora\"]) \n  |> aggregateWindow(every: 1y, fn: mean, createEmpty: false)\n  |> sort(columns: [\"ora\"])\n  |> group(columns: [\"dayOfWeek\"]) ",
          "refId": "A"
        }
      ],
      "title": "Profilo giorno medio: ESTATE",
      "type": "ae3e-plotly-panel"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "c8d51185-be18-4b9b-8da3-4947b99369ea"
      },
      "gridPos": {
        "h": 11,
        "w": 12,
        "x": 0,
        "y": 69
      },
      "id": 13,
      "options": {
        "config": {
          "displayModeBar": true,
          "displaylogo": false,
          "modeBarButtonsToRemove": [
            "toggleSpikelines",
            "hoverClosestCartesian",
            "hoverCompareCartesian"
          ]
        },
        "data": [
          {
            "mode": "lines",
            "type": "scatter"
          }
        ],
        "layout": {
          "font": {
            "color": "#c7d0d9",
            "family": "Roboto",
            "size": 12
          },
          "margin": {
            "b": 40,
            "t": 30
          },
          "paper_bgcolor": "rgba(24,27,31,0)",
          "plot_bgcolor": "rgba(24,27,31,0)",
          "xaxis": {
            "autorange": true,
            "gridcolor": "#3d4146",
            "range": [
              0,
              23
            ],
            "tickmode": "auto",
            "title": {
              "text": "Indice Orario"
            },
            "type": "linear"
          },
          "yaxis": {
            "autorange": true,
            "gridcolor": "#3d4146",
            "range": [
              29.155869658119656,
              78.06578418803419
            ],
            "tickmode": "auto",
            "ticks": "outside",
            "title": {
              "text": "Kw/h"
            },
            "type": "linear"
          }
        },
        "onclick": "console.log(data)\nwindow.updateVariables({query:{'var-project':'test'}, partial: true})",
        "script": "\nlet WEEK = [\"Lun\", \"Mar\", \"Mer\", \"Gio\", \"Ven\", \"Sab\", \"Dom\"]\n\n\nlet seriess = data?.series?.map((s, idx) => {\n  const numWeek = +s.fields[4]?.labels?.dayOfWeek;\n  return {\n    x: s?.fields[3]?.values || [],\n    y: s?.fields[4]?.values || [],\n    name: numWeek ? WEEK[numWeek - 1] : \"\"\n  }\n})\n\n\nconsole.log(\"series\", seriess)\nreturn {\n  data: seriess,\n  config: {\n    displayModeBar: false,\n  },\n};"
      },
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "e828abd2-fb14-44af-bf94-9dacac649c95"
          },
          "query": "import \"date\"\nimport \"timezone\"\n\n\ncalcStagione = (mese) => {\n    return if mese >= 3 and mese <= 5 then \"Primavera\"\n    else if mese >= 6 and mese <= 8 then \"Estate\"\n    else if mese >= 9 and mese <= 11 then \"Autunno\"\n    else \"Inverno\"\n}\n\nfrom(bucket: \"homeassistant\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == \"kWh\" and r._field == \"value\" and  r[\"type_measure\"] == \"energia\" and r.device_id == ${deviceId})\n  |> map(fn: (r) => ({\n      _time: r._time,\n      _value: r._value,\n      dayOfWeek: date.weekDay(t: r._time),\n      ora: date.hour(t: r._time),\n      stagione: calcStagione(mese: date.month(t: r._time))\n  }))\n\n  |> filter(fn: (r) => r.stagione == \"Autunno\")\n  |> map(fn: (r) => ({ r with dayOfWeek: if r.dayOfWeek == 0 then 7 else r.dayOfWeek }))\n  |> group(columns: [\"dayOfWeek\", \"ora\"]) \n  |> aggregateWindow(every: 1y, fn: mean, createEmpty: false)\n  |> sort(columns: [\"ora\"])\n  |> group(columns: [\"dayOfWeek\"]) ",
          "refId": "A"
        }
      ],
      "title": "Profilo giorno medio: AUTUNNO",
      "type": "ae3e-plotly-panel"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "c8d51185-be18-4b9b-8da3-4947b99369ea"
      },
      "gridPos": {
        "h": 11,
        "w": 12,
        "x": 12,
        "y": 69
      },
      "id": 11,
      "options": {
        "config": {
          "displayModeBar": true,
          "displaylogo": false,
          "modeBarButtonsToRemove": [
            "toggleSpikelines",
            "hoverClosestCartesian",
            "hoverCompareCartesian"
          ]
        },
        "data": [
          {
            "mode": "lines",
            "type": "scatter"
          }
        ],
        "layout": {
          "font": {
            "color": "#c7d0d9",
            "family": "Roboto",
            "size": 12
          },
          "margin": {
            "b": 40,
            "t": 30
          },
          "paper_bgcolor": "rgba(24,27,31,0)",
          "plot_bgcolor": "rgba(24,27,31,0)",
          "xaxis": {
            "autorange": true,
            "gridcolor": "#3d4146",
            "range": [
              0,
              23
            ],
            "tickmode": "auto",
            "title": {
              "text": "Indice Orario"
            },
            "type": "linear"
          },
          "yaxis": {
            "autorange": true,
            "gridcolor": "#3d4146",
            "range": [
              29.61879131054131,
              114.0148881766382
            ],
            "tickmode": "auto",
            "ticks": "outside",
            "title": {
              "text": "Kw/h"
            },
            "type": "linear"
          }
        },
        "onclick": "console.log(data)\nwindow.updateVariables({query:{'var-project':'test'}, partial: true})",
        "script": "\nlet WEEK = [\"Lun\", \"Mar\", \"Mer\", \"Gio\", \"Ven\", \"Sab\", \"Dom\"]\n\n\nlet seriess = data?.series?.map((s, idx) => {\n  const numWeek = +s.fields[4]?.labels?.dayOfWeek;\n  return {\n    x: s?.fields[3]?.values || [],\n    y: s?.fields[4]?.values || [],\n    name: numWeek ? WEEK[numWeek - 1] : \"\"\n  }\n})\n\n\nconsole.log(\"series\", seriess)\nreturn {\n  data: seriess,\n  config: {\n    displayModeBar: false,\n  },\n};"
      },
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "e828abd2-fb14-44af-bf94-9dacac649c95"
          },
          "query": "import \"date\"\nimport \"timezone\"\n\n\ncalcStagione = (mese) => {\n    return if mese >= 3 and mese <= 5 then \"Primavera\"\n    else if mese >= 6 and mese <= 8 then \"Estate\"\n    else if mese >= 9 and mese <= 11 then \"Autunno\"\n    else \"Inverno\"\n}\n\nfrom(bucket: \"homeassistant\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == \"kWh\" and r._field == \"value\" and  r[\"type_measure\"] == \"energia\" and r.device_id == ${deviceId})\n  |> map(fn: (r) => ({\n      _time: r._time,\n      _value: r._value,\n      dayOfWeek: date.weekDay(t: r._time),\n      ora: date.hour(t: r._time),\n      stagione: calcStagione(mese: date.month(t: r._time))\n  }))\n\n  |> filter(fn: (r) => r.stagione == \"Inverno\")\n  |> map(fn: (r) => ({ r with dayOfWeek: if r.dayOfWeek == 0 then 7 else r.dayOfWeek }))\n  |> group(columns: [\"dayOfWeek\", \"ora\"]) \n  |> aggregateWindow(every: 1y, fn: mean, createEmpty: false)\n  |> sort(columns: [\"ora\"])\n  |> group(columns: [\"dayOfWeek\"]) ",
          "refId": "A"
        }
      ],
      "title": "Profilo giorno medio: INVERNO",
      "type": "ae3e-plotly-panel"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "c8d51185-be18-4b9b-8da3-4947b99369ea"
      },
      "gridPos": {
        "h": 11,
        "w": 24,
        "x": 0,
        "y": 80
      },
      "id": 15,
      "options": {
        "config": {
          "displayModeBar": true,
          "displaylogo": false,
          "modeBarButtonsToRemove": [
            "toggleSpikelines",
            "hoverClosestCartesian",
            "hoverCompareCartesian"
          ]
        },
        "data": [
          {
            "mode": "lines",
            "type": "scatter"
          }
        ],
        "layout": {
          "font": {
            "color": "#c7d0d9",
            "family": "Roboto",
            "size": 12
          },
          "margin": {
            "b": 40,
            "t": 30
          },
          "paper_bgcolor": "rgba(24,27,31,0)",
          "plot_bgcolor": "rgba(24,27,31,0)",
          "xaxis": {
            "autorange": true,
            "gridcolor": "#3d4146",
            "range": [
              0,
              23
            ],
            "tickmode": "auto",
            "title": {
              "text": "Indice Orario"
            },
            "type": "linear"
          },
          "yaxis": {
            "autorange": true,
            "gridcolor": "#3d4146",
            "range": [
              1609.190106481481,
              1609.8180119395715
            ],
            "tickmode": "auto",
            "ticks": "outside",
            "title": {
              "text": "Kw/h"
            },
            "type": "linear"
          }
        },
        "onclick": "console.log(data)\nwindow.updateVariables({query:{'var-project':'test'}, partial: true})",
        "script": "\nlet WEEK = [\"Lun\", \"Mar\", \"Mer\", \"Gio\", \"Ven\", \"Sab\", \"Dom\"]\n\n\nlet seriess = data?.series?.map((s, idx) => {\n  const numWeek = +s.fields[4]?.labels?.dayOfWeek;\n  return {\n    x: s?.fields[3]?.values || [],\n    y: s?.fields[4]?.values || [],\n    name: numWeek ? WEEK[numWeek - 1] : \"\"\n  }\n})\n\n\nconsole.log(\"series\", seriess)\nreturn {\n  data: seriess,\n  config: {\n    displayModeBar: false,\n  },\n};"
      },
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "e828abd2-fb14-44af-bf94-9dacac649c95"
          },
          "query": "import \"date\"\nimport \"timezone\"\n\n\ncalcStagione = (mese) => {\n    return if mese >= 3 and mese <= 5 then \"Primavera\"\n    else if mese >= 6 and mese <= 8 then \"Estate\"\n    else if mese >= 9 and mese <= 11 then \"Autunno\"\n    else \"Inverno\"\n}\n\nfrom(bucket: \"homeassistant\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == \"kWh\" and r._field == \"value\" and  r[\"type_measure\"] == \"energia\" and r.device_id == ${deviceId})\n  |> map(fn: (r) => ({\n      _time: r._time,\n      _value: r._value,\n      dayOfWeek: date.weekDay(t: r._time),\n      ora: date.hour(t: r._time),\n      stagione: calcStagione(mese: date.month(t: r._time))\n  }))\n\n  |> filter(fn: (r) => r.stagione == \"Inverno\" or r.stagione ==\"Estate\")\n  |> map(fn: (r) => ({ r with dayOfWeek: if r.dayOfWeek == 0 then 7 else r.dayOfWeek }))\n  |> group(columns: [\"stagione\", \"ora\"]) \n  |> aggregateWindow(every: 1y, fn: mean, createEmpty: false)\n  |> group(columns: [\"stagione\"]) \n  |> sort(columns: [\"ora\"])",
          "refId": "A"
        }
      ],
      "title": "Confronto profilo inverno vs estate",
      "type": "ae3e-plotly-panel"
    },
    {
      "collapsed": false,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 91
      },
      "id": 20,
      "panels": [],
      "title": "Sintesi annuale",
      "type": "row"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "c8d51185-be18-4b9b-8da3-4947b99369ea"
      },
      "gridPos": {
        "h": 11,
        "w": 24,
        "x": 0,
        "y": 92
      },
      "id": 16,
      "maxDataPoints": 100000,
      "options": {
        "config": {
          "displayModeBar": true,
          "displaylogo": false,
          "modeBarButtonsToRemove": [
            "toggleSpikelines",
            "hoverClosestCartesian",
            "hoverCompareCartesian"
          ]
        },
        "data": [
          {
            "mode": "lines",
            "type": "scatter"
          }
        ],
        "layout": {
          "font": {
            "color": "#c7d0d9",
            "family": "Roboto",
            "size": 12
          },
          "margin": {
            "b": 40,
            "t": 30
          },
          "paper_bgcolor": "rgba(24,27,31,0)",
          "plot_bgcolor": "rgba(24,27,31,0)",
          "xaxis": {
            "autorange": true,
            "gridcolor": "#3d4146",
            "range": [
              0,
              8759
            ],
            "tickmode": "auto",
            "title": {
              "text": "Indice Orario"
            },
            "type": "linear"
          },
          "yaxis": {
            "autorange": true,
            "gridcolor": "#3d4146",
            "range": [
              -3.7555555555555555,
              71.35555555555555
            ],
            "tickmode": "auto",
            "ticks": "outside",
            "title": {
              "text": "Kw/h"
            },
            "type": "linear"
          }
        },
        "onclick": "console.log(data)\nwindow.updateVariables({query:{'var-project':'test'}, partial: true})",
        "script": "\nlet values = data?.series[0]?.fields[1]?.values;\nvalues = values?.sort((a, b)=> b-a);\n\nlet x = [];\nlet y = [];\nfor(let i = 0; i< 8760; i++){\n  x.push(i);\n  y.push(values && values[i] ? values[i] : 0);\n}\n\nlet seriess = [{x, y}];\n\nreturn {\n  data: seriess,\n  config: {\n    displayModeBar: false,\n  },\n};"
      },
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "e828abd2-fb14-44af-bf94-9dacac649c95"
          },
          "query": "import \"date\"\nimport \"timezone\"\n\nfrom(bucket: \"homeassistant\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => \n      r._measurement == \"kWh\" and \n      r._field == \"value\" and\n      r[\"type_measure\"] == \"energia\" and\n      r.device_id == ${deviceId}\n  )\n  |> group(columns: [\"device_id\"]) \n  |> aggregateWindow(every: 1h, fn: sum, createEmpty: false)\n  |> map(fn: (r) => ({\n      _time: r._time,\n      _value: if exists r._value then float(v: r._value) else 0.0,\n  }))",
          "refId": "A"
        }
      ],
      "title": "Curva di richiesta del carico elettrico",
      "type": "ae3e-plotly-panel"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "c8d51185-be18-4b9b-8da3-4947b99369ea"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            }
          },
          "mappings": []
        },
        "overrides": []
      },
      "gridPos": {
        "h": 11,
        "w": 12,
        "x": 0,
        "y": 103
      },
      "id": 18,
      "options": {
        "displayLabels": [
          "name",
          "percent"
        ],
        "legend": {
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "pieType": "pie",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "e828abd2-fb14-44af-bf94-9dacac649c95"
          },
          "query": "import \"date\"\nimport \"timezone\"\n\n\ncalcStagione = (mese) => {\n    return if mese >= 3 and mese <= 5 then \"Primavera\"\n    else if mese >= 6 and mese <= 8 then \"Estate\"\n    else if mese >= 9 and mese <= 11 then \"Autunno\"\n    else \"Inverno\"\n}\n\nfrom(bucket: \"homeassistant\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == \"kWh\" and r.fascia != \"0\" and r.fascia != \"\" and r._field == \"value\" and  r[\"type_measure\"] == \"energia\" and r.device_id == ${deviceId})\n  |> group(columns: [\"fascia\"]) \n  |> aggregateWindow(every: 1y, fn: mean, createEmpty: false)",
          "refId": "A"
        }
      ],
      "title": "Consumo in fasce",
      "type": "piechart"
    },
    {
      "collapsed": false,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 114
      },
      "id": 17,
      "panels": [],
      "title": "Sintesi mensile",
      "type": "row"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "c8d51185-be18-4b9b-8da3-4947b99369ea"
      },
      "gridPos": {
        "h": 11,
        "w": 24,
        "x": 0,
        "y": 115
      },
      "id": 19,
      "options": {
        "config": {
          "displayModeBar": true,
          "displaylogo": false,
          "modeBarButtonsToRemove": [
            "toggleSpikelines",
            "hoverClosestCartesian",
            "hoverCompareCartesian"
          ]
        },
        "data": [
          {
            "mode": "lines",
            "type": "scatter"
          }
        ],
        "layout": {
          "barmode": "stack",
          "font": {
            "color": "#c7d0d9",
            "family": "Roboto",
            "size": 12
          },
          "margin": {
            "b": 40,
            "t": 30
          },
          "paper_bgcolor": "rgba(24,27,31,0)",
          "plot_bgcolor": "rgba(24,27,31,0)",
          "xaxis": {
            "autorange": false,
            "gridcolor": "#3d4146",
            "range": [
              1,
              12
            ],
            "tickmode": "auto",
            "title": {
              "text": "Indice Orario"
            },
            "type": "linear"
          },
          "yaxis": {
            "autorange": true,
            "gridcolor": "#3d4146",
            "range": [
              0,
              1.7374699064715324
            ],
            "tickmode": "auto",
            "ticks": "outside",
            "title": {
              "text": "Kw/h"
            },
            "type": "linear"
          }
        },
        "onclick": "console.log(data)\nwindow.updateVariables({query:{'var-project':'test'}, partial: true})",
        "script": "const fascia1 = {x:[], y:[], type: 'bar', name: \"Fascia 1\"}\nconst fascia2 = {x:[], y:[], type: 'bar', name: \"Fascia 2\"}\nconst fascia3 = {x:[], y:[], type: 'bar', name: \"Fascia 3\"}\nconsole.log(\"data?.series\", data?.series)\ndata?.series?.map((valori, idx)=>{\n  const fascie = valori?.fields[4]?.values;\n  const mese = +valori?.fields[4]?.labels?.mese\n\n  if(!fascie) return \n  \n  fascia1.x.push(mese);\n  fascia1.y.push(fascie[0]);\n\n  fascia2.x.push(mese);\n  fascia2.y.push(fascie[1]);\n  \n  fascia3.x.push(mese);\n  fascia3.y.push(fascie[2]);\n})\n\nreturn {data:[fascia1, fascia2, fascia3]};"
      },
      "pluginVersion": "10.1.5",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "c8d51185-be18-4b9b-8da3-4947b99369ea"
          },
          "query": "import \"date\"\nimport \"timezone\"\n\n\nfrom(bucket: \"homeassistant\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == \"kWh\" and r._field == \"value\" and r.fascia != \"0\" and r.fascia != \"\" and  r[\"type_measure\"] == \"energia\" and r.device_id == ${deviceId})\n  |> map(fn: (r) => ({\n      _time: r._time,\n      _value: r._value,\n      fascia: r.fascia,\n      mese: date.month(t: r._time)\n  }))\n\n  |> group(columns: [\"mese\", \"fascia\"])\n  |> aggregateWindow(every: 1y, fn: mean, createEmpty: false)\n  |> group(columns: [\"mese\"])",
          "refId": "A"
        }
      ],
      "title": "Consumo mensile in fasce",
      "type": "ae3e-plotly-panel"
    }
  ],
  "refresh": false,
  "schemaVersion": 38,
  "style": "dark",
  "tags": [],
  "templating": {
    "list": [
      {
        "current": {
          "selected": false,
          "text": "\"shelly_alimentazione_generale_p1\"",
          "value": "\"shelly_alimentazione_generale_p1\""
        },
        "datasource": {
          "type": "influxdb",
          "uid": "c8d51185-be18-4b9b-8da3-4947b99369ea"
        },
        "definition": "from(bucket: \"homeassistant\")\n  |> range(start: 0)\n  |> keep(columns: [\"device_id\"])\n  |> group(columns: [\"device_id\"])\n  |> distinct(column: \"device_id\")\n  |> filter(fn: (r) => exists r.device_id)\n  |> map(fn: (r) => ({\n      _value: \"\\\"\" + string(v: r.device_id) + \"\\\"\"\n  }))\n",
        "hide": 1,
        "includeAll": false,
        "multi": false,
        "name": "deviceId",
        "options": [],
        "query": "from(bucket: \"homeassistant\")\n  |> range(start: 0)\n  |> keep(columns: [\"device_id\"])\n  |> group(columns: [\"device_id\"])\n  |> distinct(column: \"device_id\")\n  |> filter(fn: (r) => exists r.device_id)\n  |> map(fn: (r) => ({\n      _value: \"\\\"\" + string(v: r.device_id) + \"\\\"\"\n  }))\n",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      }
    ]
  },
  "time": {
    "from": "2024-05-31T22:00:00.000Z",
    "to": "2024-06-11T22:00:00.000Z"
  },
  "timepicker": {
    "refresh_intervals": [
      "5s",
      "10s",
      "30s",
      "1m",
      "5m",
      "15m",
      "30m",
      "1h",
      "2h",
      "1d"
    ]
  },
  "timezone": "",
  "title": "Diagnosi",
  "uid": "ffb2d46b-c638-4278-897c-f7134de5ac85",
  "version": 4,
  "weekStart": ""
}